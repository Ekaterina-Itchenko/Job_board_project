# Generated by Django 4.2.2 on 2023-07-12 22:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies: list[tuple[str, str]] = []

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("city", models.CharField(max_length=50)),
                ("country", models.CharField(max_length=50)),
                ("street", models.CharField(max_length=50)),
                ("house_number", models.PositiveIntegerField()),
                ("office_number", models.PositiveIntegerField(null=True)),
            ],
            options={
                "db_table": "addresses",
            },
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("foundation_year", models.PositiveIntegerField(null=True)),
                ("logo", models.ImageField(upload_to="companies_logo")),
                ("description", models.TextField(null=True)),
                ("email", models.EmailField(max_length=254, null=True)),
                ("phone", models.CharField(max_length=25)),
                ("web_site", models.URLField(unique=True)),
                ("linkedin", models.URLField(unique=True)),
                ("twitter", models.URLField(unique=True)),
                ("instagram", models.URLField(unique=True)),
                (
                    "address",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="companies",
                        related_query_name="company",
                        to="core.address",
                    ),
                ),
            ],
            options={
                "db_table": "companies",
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "countries",
            },
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("surname", models.CharField(max_length=50)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(max_length=25)),
                ("password", models.CharField(max_length=25, unique=True)),
                ("city", models.CharField(max_length=50)),
                ("country", models.CharField(max_length=50)),
                ("photo", models.ImageField(upload_to="employees_photo")),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employees",
                        related_query_name="employee",
                        to="core.company",
                    ),
                ),
            ],
            options={
                "db_table": "employees",
            },
        ),
        migrations.CreateModel(
            name="EmployeesQuantityRange",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "employees_quantity_ranges",
            },
        ),
        migrations.CreateModel(
            name="Gender",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=15, unique=True)),
            ],
            options={
                "db_table": "genders",
            },
        ),
        migrations.CreateModel(
            name="JobAppFormat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "db_table": "app_formats",
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "languages",
            },
        ),
        migrations.CreateModel(
            name="LanguageLevel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "db_table": "language_levels",
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "levels",
            },
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "db_table": "positions",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("phone", models.CharField(max_length=30, null=True)),
                ("age", models.PositiveIntegerField(null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("country", models.CharField(max_length=30, null=True)),
                ("photo", models.ImageField(upload_to="users_photo")),
                (
                    "gender",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profiles",
                        related_query_name="profile",
                        to="core.gender",
                    ),
                ),
            ],
            options={
                "db_table": "profiles",
            },
        ),
        migrations.CreateModel(
            name="RespondStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=30)),
            ],
            options={
                "db_table": "respond_statuses",
            },
        ),
        migrations.CreateModel(
            name="Sector",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "sectors",
            },
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "statuses",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "db_table": "tags",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("surname", models.CharField(max_length=50)),
                ("login", models.CharField(max_length=50, unique=True)),
                ("password", models.CharField(max_length=50, unique=True)),
                ("email", models.CharField(max_length=50, unique=True)),
                ("experience_description", models.TextField(max_length=1000)),
                ("resume", models.FileField(unique=True, upload_to="users_resume")),
                ("linkedin", models.URLField(unique=True)),
                ("github", models.URLField(unique=True)),
                ("min_salary", models.PositiveIntegerField(null=True)),
                ("max_salary", models.PositiveIntegerField(null=True)),
                ("experience", models.CharField(max_length=20)),
                (
                    "app_format",
                    models.ManyToManyField(
                        db_table="users_job_app_format", related_name="users", to="core.jobappformat"
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="WorkFormat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "db_table": "work_formats",
            },
        ),
        migrations.CreateModel(
            name="Vacancy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("expirience", models.CharField(max_length=30)),
                ("description", models.TextField(null=True)),
                ("min_salary", models.PositiveIntegerField(null=True)),
                ("max_salary", models.PositiveIntegerField(null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vacancies",
                        related_query_name="vacancy",
                        to="core.company",
                    ),
                ),
                (
                    "countries",
                    models.ManyToManyField(db_table="vacancies_country", related_name="vacancies", to="core.country"),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vacancies",
                        related_query_name="vacancy",
                        to="core.employee",
                    ),
                ),
                (
                    "job_app_format",
                    models.ManyToManyField(
                        db_table="vacancies_app_formats", related_name="vacancies", to="core.jobappformat"
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="vacancies", to="core.level"
                    ),
                ),
                ("tags", models.ManyToManyField(db_table="vacancies_tags", related_name="vacancies", to="core.tag")),
                (
                    "work_format",
                    models.ManyToManyField(
                        db_table="vacancies_work_formats", related_name="vacancies", to="core.workformat"
                    ),
                ),
            ],
            options={
                "db_table": "vacancies",
            },
        ),
        migrations.CreateModel(
            name="UserLanguageLevel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("language", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.language")),
                (
                    "language_level",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.languagelevel"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.user")),
            ],
            options={
                "db_table": "users_languages_levels",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="language",
            field=models.ManyToManyField(related_name="users", through="core.UserLanguageLevel", to="core.language"),
        ),
        migrations.AddField(
            model_name="user",
            name="level",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                related_query_name="users",
                to="core.level",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="profile",
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="core.profile"),
        ),
        migrations.AddField(
            model_name="user",
            name="status",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                related_query_name="user",
                to="core.status",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="tags",
            field=models.ManyToManyField(db_table="users_tags", related_name="users", to="core.tag"),
        ),
        migrations.AddField(
            model_name="user",
            name="work_format",
            field=models.ManyToManyField(db_table="users_work_format", related_name="users", to="core.workformat"),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("review", models.TextField(max_length=800)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        related_query_name="review",
                        to="core.user",
                    ),
                ),
            ],
            options={
                "db_table": "reviews",
            },
        ),
        migrations.CreateModel(
            name="Respond",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(max_length=500, null=True)),
                ("resume", models.FileField(unique=True, upload_to="users_resume")),
                ("phone", models.CharField(max_length=25, null=True)),
                (
                    "respond_status",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="responds",
                        related_query_name="respond",
                        to="core.respondstatus",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responds",
                        related_query_name="respond",
                        to="core.user",
                    ),
                ),
                (
                    "vacancy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responds",
                        related_query_name="respond",
                        to="core.vacancy",
                    ),
                ),
            ],
            options={
                "db_table": "responds",
            },
        ),
        migrations.AddField(
            model_name="employee",
            name="position",
            field=models.ManyToManyField(db_table="employees_positions", related_name="employees", to="core.position"),
        ),
        migrations.AddField(
            model_name="company",
            name="quantity_range",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="companies",
                related_query_name="company",
                to="core.employeesquantityrange",
            ),
        ),
        migrations.AddField(
            model_name="company",
            name="review",
            field=models.ManyToManyField(db_table="companies_reviews", related_name="companies", to="core.review"),
        ),
        migrations.AddField(
            model_name="company",
            name="sector",
            field=models.ManyToManyField(db_table="companies_sectors", related_name="companies", to="core.sector"),
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.BooleanField()),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        related_query_name="like",
                        to="core.review",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        related_query_name="like",
                        to="core.user",
                    ),
                ),
            ],
            options={
                "db_table": "likes",
                "unique_together": {("user", "review")},
            },
        ),
    ]
